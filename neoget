#!/usr/bin/env bash

# Copyright (c) 2002-2015 "Neo Technology,"
# Network Engine for Objects in Lund AB [http://neotechnology.com]
#
# This file is part of Neo4j.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source "$(dirname $(realpath $0))/.neoenv"

ACTION="download"
CHECK_EXISTS=0
MODE=""

function usage {
    SCRIPT=$(basename $0)
    echo "Usage: ${SCRIPT} [<options>] [<version> [<version> ...]]"
    echo ""
    echo "Download tool for Neo4j server packages."
    echo ""
    echo "Action Options:"
    echo "  -d  download Neo4j to the current directory (default)"
    echo "  -i  install Neo4j to ${NEOKIT_DIST}"
    echo "  -l  show a list of available Neo4j versions"
    echo "  -h  display this help text"
    echo ""
    echo "Download Options:"
    echo "  -x  only download/install if the file does not already exist"
    echo ""
    echo "Edition Options:"
    echo "  -c  use Neo4j Community edition (default)"
    echo "  -e  use Neo4j Enterprise edition"
    echo ""
    echo "List Options:"
    echo "  -f list only archive file names"
    echo "  -u list full download URLs (default)"
    echo "  -v list only versions"
    echo ""
    echo "Environment:"
    echo "  NEO4J_DIST - base URL for downloads (default: http://dist.neo4j.org)"
    echo ""
    echo "Report bugs to nigel@neotechnology.com"
}

function set_downloadable {
    DOWNLOADABLE=1
    if [ ${CHECK_EXISTS} -eq 1 ]
    then
        if [ -f ${ARCHIVE_PATH} ]
        then
            DOWNLOADABLE=0
        fi
    fi
}

function list {
    for VERSION in ${VERSIONS}
    do
        set_archive
        if [ "${MODE}" == "file" ]
        then
            echo "${ARCHIVE_NAME}"
        elif [ "${MODE}" == "version" ]
        then
            echo "${VERSION_NUMBER}"
        else
            echo "${ARCHIVE_URL}"
        fi
    done
}

function download {
    DOWNLOAD_DIR="$1"
    for VERSION in ${VERSIONS}
    do
        set_archive "${DOWNLOAD_DIR}"
        set_downloadable
        if [ ${DOWNLOADABLE} -eq 1 ]
        then
            curl --silent --fail "${ARCHIVE_URL}" -o "${ARCHIVE_PATH}"
            EXIT_STATUS=$?
            if [ ${EXIT_STATUS} -eq 0 ]
            then
                echo "${ARCHIVE_PATH}"
            else
                echo 1>&2 "Cannot download archive ${ARCHIVE_URL}"
                exit ${EXIT_STATUS}
            fi
        else
            echo "${ARCHIVE_PATH}"
        fi
    done
}

while getopts ":cdefhilmnuvx" OPTION
do
  case ${OPTION} in
    c)
      EDITION="community"
      ;;
    d)
      ACTION="download"
      ;;
    e)
      EDITION="enterprise"
      ;;
    f)
      MODE="file"
      ;;
    h)
      ACTION="help"
      ;;
    i)
      ACTION="install"
      ;;
    l)
      ACTION="list"
      ;;
    u)
      MODE="url"
      ;;
    v)
      MODE="version"
      ;;
    x)
      CHECK_EXISTS=1
      ;;
    \?)
      echo "Invalid option: -${OPTARG}" >&2
      ;;
  esac
done

shift $(($OPTIND - 1))
if [ "$*" != "" ]
then
    VERSIONS="$*"
else
    set -- ${VERSIONS}
    VERSIONS=$1
fi

if [ "${ACTION}" == "help" ]
then
    usage
elif [ "${ACTION}" == "list" ]
then
    list
elif [ "${ACTION}" == "install" ]
then
    download "${NEOKIT_DIST}"
else
    download
fi

